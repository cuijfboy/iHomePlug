C51 COMPILER V9.54   USB_DESC                                                              02/08/2016 23:35:19 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE USB_DESC
OBJECT MODULE PLACED IN .\build\usb_desc.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE app\usb_desc.c LARGE OBJECTADVANCED OPTIMIZE(8,SPEED) BROWSE INCDIR(hal;
                    -hal\nrf24l01p;gazell\common;gazell\nrf24lu1;params;lib\crypt;lib\assertions;hal\nrf24lu1p;compiler\c51;compiler\common;a
                    -pp) DEFINE(NRF24LU1P) DEBUG PRINT(.\lst\usb_desc.lst) OBJECT(.\build\usb_desc.obj)

line level    source

   1          /* Copyright (c) 2008 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is property of Nordic Semiconductor ASA.
   4           * Terms and conditions of usage are described in detail in NORDIC
   5           * SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *
  11           * $LastChangedRevision$
  12           */
  13          
  14          #include "usb_desc.h"
  15          #include "nordic_common.h"               
  16          
  17          #define MAX_PACKET_SIZE_EP0 32
  18          #define EP1_PACKET_SIZE         32
  19          
  20          code const hal_usb_dev_desc_t g_usb_dev_desc =
  21          {
  22                  sizeof(hal_usb_dev_desc_t),         // bLength
  23                  0x01,                               // bDescriptorType
  24                  SWAP(0x0200),                       // bcdUSB
  25                  0x00,                               // bDeviceClass
  26                  0x00,                               // bDeviceSubClass
  27                  0x00,                               // bDeviceProtocol
  28                  MAX_PACKET_SIZE_EP0,                // bMaxPacketSize0
  29                  SWAP(VID),                          // idVendor (Nordic )
  30                  SWAP(PID),                          // idProduct (dongle)
  31                  SWAP(0x0100),                       // bcdDevice
  32                  0x01,                               // iManufacturer
  33                  0x02,                               // iProduct
  34                  0x03,                               // iSerialNumber
  35                  0x01                                // bNumConfigurations
  36          };
  37          
  38          // From "USB Device Class Definition for Human Interface Devices (HID)".
  39          // Section 7.1:
  40          // "When a Get_Descriptor(Configuration) request is issued,
  41          // it returns the Configuration descriptor, all Interface descriptors,
  42          // all Endpoint descriptors, and the HID descriptor for each interface."
  43          code const usb_conf_desc_templ_t g_usb_conf_desc =
  44          {
  45                  { // configuration_descriptor hid_configuration_descriptor
  46                          sizeof(hal_usb_conf_desc_t),            // Length
  47                          0x02,                                   // Type                             
  48                          SWAP(sizeof(usb_conf_desc_templ_t)),    // Totallength
  49                          0x01,                                   // NumInterfaces
  50                          0x01,                                   // bConfigurationValue
  51                          0x00,                                   // iConfiguration
  52                          0xA0,                                   // bmAttributes (0x80 + Remote Wakeup)
  53                          0x32                                    // MaxPower (in 2mA units) = 100 * 2mA
C51 COMPILER V9.54   USB_DESC                                                              02/08/2016 23:35:19 PAGE 2   

  54                  },
  55                  { // interface_descriptor hid_interface_descriptor    (REMOTE CONTROL)
  56                          sizeof(hal_usb_if_desc_t),              // Length
  57                          0x04,                                   // bDescriptorType
  58                          0x00,                                   // bInterfaceNumber
  59                          0x00,                                   // bAlternateSetting
  60                          0x01,                                   // bNumEndpoints
  61                          0x03,                                   // bInterfaceClass (3 = HID)
  62                          0x00,                                   // bInterfaceSubClass
  63                          0x00,                                   // bInterfaceProcotol(0=None, 1=Keyb, 2=Mouse)
  64                          0x00                                    // iInterface
  65                  },
  66                  { // class_descriptor hid_descriptor
  67                          sizeof(hal_usb_hid_desc_t),             // Length
  68                          0x21,                                   // bDescriptorType
  69                          SWAP(0x0111),                           // bcdHID
  70                          0x00,                                   // bCountryCode
  71                          0x01,                                   // bNumDescriptors
  72                          0x22,                                   // bDescriptorType
  73                          SWAP(HID_REPORT_DESCRIPTOR_SIZE_RC),    // wItemLength (tot. len. of report
  74                                                                                          // descriptor)
  75                  },
  76                  { // endpoint_descriptor hid_endpoint_in_descriptor
  77                          sizeof(hal_usb_ep_desc_t),              // Length
  78                          0x05,                                   // bDescriptorType
  79                          0x81,                                   // bEndpointAddress
  80                          0x03,                                   // bmAttributes
  81                          SWAP(EP1_PACKET_SIZE),                  // MaxPacketSize (LITTLE ENDIAN)
  82                          2                                       // bInterval
  83                  },
  84                  { // endpoint_descriptor hid_endpoint_in_descriptor
  85                          sizeof(hal_usb_ep_desc_t),              // Length
  86                          0x05,                                   // bDescriptorType
  87                          0x91,                                   // bEndpointAddress
  88                          0x03,                                   // bmAttributes
  89                          SWAP(EP1_PACKET_SIZE),                  // MaxPacketSize (LITTLE ENDIAN)
  90                          2                                       // bInterval
  91                  }                                                                               
  92          };
  93          
  94          #define USB_STRING_IDX_1_DESC "iClass"
  95          #define USB_STRING_IDX_2_DESC "iClass Host"
  96          #define USB_STRING_IDX_3_DESC "0.01"
  97          
  98          code uint8_t g_usb_string_desc_1[] = 
  99          {
 100                  sizeof(USB_STRING_IDX_1_DESC) * 2, 
 101                  0x03, 
 102                  'i',00,
 103                  'C',00,
 104                  'l',00,
 105                  'a',00,
 106                  's',00,
 107                  's',00,
 108          };
 109          
 110          code uint8_t g_usb_string_desc_2[] = 
 111          {
 112                  sizeof(USB_STRING_IDX_2_DESC) * 2,
 113                  0x03, 
 114                  'i',00,
 115                  'C',00,
C51 COMPILER V9.54   USB_DESC                                                              02/08/2016 23:35:19 PAGE 3   

 116                  'l',00,
 117                  'a',00,
 118                  's',00,
 119                  's',00,
 120                  ' ',00,
 121                  'H',00,
 122                  'o',00,
 123                  's',00,
 124                  't',00,
 125          };
 126          
 127          //This is a dummy serial number. The real serial number should be
 128          //written by the application
 129          code uint8_t g_usb_string_desc_3[] = 
 130          {
 131                  sizeof(USB_STRING_IDX_3_DESC) * 2, 
 132                  0x03, 
 133                  0xFF,0xFF,
 134                  0xFF,0xFF,
 135                  0xFF,0xFF,
 136                  0xFF,0xFF
 137          };
 138          
 139          code usb_string_desc_templ_t g_usb_string_desc = 
 140          {
 141                  g_usb_string_desc_1,
 142                  g_usb_string_desc_2,
 143                  g_usb_string_desc_3
 144          };


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =    116    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
