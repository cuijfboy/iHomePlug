/******************************************************************************

            This file is automatically generated by HttpApiCodeMaker.
            Do not modify this file -- YOUR CHANGES WILL BE ERASED!

******************************** CONFIGURATION ********************************

"PlugUpOffRequest": "PlugUpOffRequest": {
  "method": "GET",
  "fullUrl": "http://192.168.1.126/up/off",
  "url": "up/off",
  "baseUrl": "http://192.168.1.126/",
  "request": {
    "static": null,
    "name": "HttpRequest",
    "extends": null,
    "implements": [],
    "body": {},
    "header": {}
  },
  "response": {
    "static": null,
    "name": "HttpResponse",
    "extends": null,
    "implements": [],
    "body": {},
    "header": {}
  },
  "hook": [],
  "client": "[DEFAULT_CLIENT]",
  "responseType": "TEXT",
  "source": "./app/src/main/java/",
  "package": "name.ilab.ihome.generated",
  "import": [],
  "inner": {},
  "name": "PlugUpOffRequest",
  "extends": null,
  "implements": [],
  "body": {},
  "header": {}
}

******************************************************************************/

package name.ilab.ihome.generated;


import name.ilab.http.HttpRequest;
import name.ilab.http.HttpResponse;
import name.ilab.http.HttpApiHelper;
import name.ilab.http.HttpMethod;
import name.ilab.http.IApiHook;
import name.ilab.http.IHttpClient;
import name.ilab.http.ResponseType;
import name.ilab.http.HttpApiHelper;

import java.io.File;
import java.util.Map;

public class PlugUpOffRequest extends HttpRequest {

    public static final String API_NAME =
            "name.ilab.ihome.generated.PlugUpOffRequest";
    public static final String HTTP_CLIENT_NAME =
            "[DEFAULT_CLIENT]";

    public class Request {

        // header

        // body

        // url parameter

        private void generateMethod() {
            if (method == null) {
                method = HttpMethod.GET;
            }
        }

        private void generateUrl() {
            if (url == null) {
                url = "http://192.168.1.126/up/off";
                if (HttpMethod.GET == method || HttpMethod.DELETE == method) {
                    StringBuffer stringBuffer = new StringBuffer(url);
                    stringBuffer.append("?");
                    stringBuffer.deleteCharAt(stringBuffer.length() - 1);
                    if (stringBuffer.length() != url.length()) {
                        url = stringBuffer.toString();
                    }
                }
            }
        }

        private void generateHeader() {
        }

        private void generateBody() {
            if (body == null) {
                body = toString();
            }
        }

        @Override
        public String toString() {
            return HttpApiHelper.toJson(this);
        }

    }

    public static class Response extends HttpResponse {

        // header

        // body

        public Response(HttpResponse httpResponse) {
            super(httpResponse);
        }

        public Response(ResponseType responseType, int statusCode, HttpMethod method, String url,
                        Map<String, String> header) {
            super(responseType, statusCode, method, url, header);
        }

        public static Response valueOf(String valueString) {
            return HttpApiHelper.fromJson(valueString, Response.class);
        }

    }

    // --------------------------------------------------------------------------------------------

    public PlugUpOffRequest() {
        this.request = new Request();
        this.responseType = ResponseType.TEXT;
    }

    public PlugUpOffRequest go(IHttpClient httpClient) {
        request.generateMethod();
        request.generateUrl();
        request.generateHeader();
        for (IApiHook hook : obtainHookList()) {
            hook.onRequestData(API_NAME, request, Request.class);
        }
        request.generateBody();
        for (IApiHook hook : obtainHookList()) {
            hook.onRequest(API_NAME, this, request, Request.class);
        }
        httpClient.request(this);
        return this;
    }

    public PlugUpOffRequest go() {
        return go(HttpApiHelper.getInstance().getHttpClient(HTTP_CLIENT_NAME));
    }

    private void generateResponseData(int statusCode, HttpMethod method, String url,
                                      Map<String, String> header, File file) {
        response = new Response(responseType, statusCode, method, url, header);
        response.setFileSavePath(fileSavePath);
        fillResponseHeader(header);
    }

    private void generateResponseData(int statusCode, HttpMethod method, String url,
                                      Map<String, String> header, byte[] data) {
        response = new Response(responseType, statusCode, method, url, header);
        fillResponseHeader(header);
    }

    private void fillResponseHeader(Map<String, String> header) {
    }

// ################################################################################################

    public Request request;
    public Response response;

    private void generateResponseData(HttpResponse httpResponse) {
        try {
            response = Response.valueOf(httpResponse.getBody());
        } catch (Exception e) {
            e.printStackTrace();
            response = new Response(httpResponse);
        }
        fillResponseHeader(httpResponse.getHeader());
    }

    @Override
    public final void onResponse(int statusCode, Map<String, String> header, String body) {
        HttpResponse httpResponse = new HttpResponse(responseType, statusCode, method, url, header);
        httpResponse.setBody(body);
        for (IApiHook hook : obtainHookList()) {
            hook.onResponse(API_NAME, responseType, httpResponse);
        }
        generateResponseData(httpResponse);
        for (IApiHook hook : obtainHookList()) {
            hook.onResponseData(API_NAME, responseType, response, Response.class);
        }
        onResponse(statusCode, response);
    }

    @Override
    public final void onResponse(int statusCode, Map<String, String> header, File file) {
        generateResponseData(statusCode, method, url, header, file);
        onResponse();
    }

    @Override
    public final void onResponse(int statusCode, Map<String, String> header, byte[] data) {
        generateResponseData(statusCode, method, url, header, data);
        onResponse();
    }

    private void onResponse() {
        for (IApiHook hook : obtainHookList()) {
            hook.onResponse(API_NAME, responseType, response);
            hook.onResponseData(API_NAME, responseType, response, Response.class);
        }
        clearHookList();
        onResponse(response.getStatusCode(), response);
    }

    public boolean onResponse(int statusCode, Response response) {
        return false;
    }

}